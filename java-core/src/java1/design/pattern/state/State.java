package java1.design.pattern.state;

/**
 * @Author zhaojw
 * @Date 2017/12/10 17:22
 *
 * 状态模式：当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。
 * 其主要解决的是当控制一个状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类当中，可以把复杂的判断逻辑简单化
 * 优点：将于特定状态相关的行为局部化，并且将不同的应为分隔开来。
 * 消除了庞大的条件判断分支语句
 *
 * 状态抽象类：定义一个接口以封装与Context的一个特定状态相关的行为。
 *
 *  适用场景：当一个对象的行为取决与他的状态，并且他必须在运行时刻根据状态改变他的行为时
 */
public interface State {

    void writeProgram(Work work);
}
